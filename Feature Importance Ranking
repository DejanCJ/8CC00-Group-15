{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HgSdO73H4ad9",
        "outputId": "137ac8da-49f6-45a7-986e-7ef44b0b8a40"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting rdkit\n",
            "  Downloading rdkit-2023.9.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (34.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m34.9/34.9 MB\u001b[0m \u001b[31m26.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rdkit) (1.25.2)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from rdkit) (9.4.0)\n",
            "Installing collected packages: rdkit\n",
            "Successfully installed rdkit-2023.9.6\n"
          ]
        }
      ],
      "source": [
        "pip install rdkit\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UzRFGAUc4RAL",
        "outputId": "631b8b9d-7960-4457-debf-2cfe3f50c249"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Feature ranking for PKM2 inhibition:\n",
            "1. BCUT2D_MRLOW: 0.05765606660939422\n",
            "2. BalabanJ: 0.055445742237385964\n",
            "3. AvgIpc: 0.05244760335515452\n",
            "4. qed: 0.05060592484453866\n",
            "5. FpDensityMorgan1: 0.04532530009059169\n",
            "6. BCUT2D_MWLOW: 0.04322159763206442\n",
            "7. fr_sulfonamd: 0.03279110049469601\n",
            "8. fr_Ar_N: 0.030436361894959515\n",
            "9. FpDensityMorgan3: 0.026464740748246868\n",
            "10. MinEStateIndex: 0.024941015355088348\n",
            "11. fr_ether: 0.02394110136012251\n",
            "12. BCUT2D_CHGLO: 0.021941540087607934\n",
            "13. Chi3v: 0.021921071998921796\n",
            "14. NumAromaticHeterocycles: 0.021148084353303717\n",
            "15. FpDensityMorgan2: 0.01921340232702454\n",
            "16. MinPartialCharge: 0.01888997224238114\n",
            "17. MaxAbsPartialCharge: 0.01815250854759875\n",
            "18. MolLogP: 0.017418491835984557\n",
            "19. Chi4n: 0.01734203275816163\n",
            "20. BCUT2D_LOGPHI: 0.01647134864186189\n",
            "21. SPS: 0.01605838680718691\n",
            "22. MaxAbsEStateIndex: 0.016020682692041478\n",
            "23. Chi4v: 0.015445777693911257\n",
            "24. BCUT2D_LOGPLOW: 0.015300615827837045\n",
            "25. MaxEStateIndex: 0.013965702199081168\n",
            "26. Chi1v: 0.013155915876662707\n",
            "27. BertzCT: 0.012687579110580223\n",
            "28. MaxPartialCharge: 0.012214927855995105\n",
            "29. MolMR: 0.011854627406560228\n",
            "30. fr_aryl_methyl: 0.01173122277400223\n",
            "\n",
            "Feature ranking for ERK2 inhibition:\n",
            "1. MolLogP: 0.05844794613191063\n",
            "2. BCUT2D_MRHI: 0.04660862168496038\n",
            "3. BCUT2D_MWHI: 0.04520779985391455\n",
            "4. fr_ether: 0.044290262639018606\n",
            "5. BCUT2D_MRLOW: 0.04302747201469683\n",
            "6. MinAbsEStateIndex: 0.034674314171291534\n",
            "7. BalabanJ: 0.03306034161008363\n",
            "8. qed: 0.02579760462849996\n",
            "9. MinAbsPartialCharge: 0.025470017216861596\n",
            "10. HallKierAlpha: 0.02367609797402653\n",
            "11. TPSA: 0.021986366465353166\n",
            "12. MaxAbsEStateIndex: 0.02190877146942682\n",
            "13. FpDensityMorgan1: 0.021867776303196557\n",
            "14. MinEStateIndex: 0.020443466188941287\n",
            "15. fr_methoxy: 0.01963484874367964\n",
            "16. BCUT2D_MWLOW: 0.019320809546060427\n",
            "17. MaxEStateIndex: 0.019045311389940117\n",
            "18. MinPartialCharge: 0.018180700005520255\n",
            "19. BCUT2D_LOGPLOW: 0.017704694184011528\n",
            "20. FpDensityMorgan2: 0.01611801298436354\n",
            "21. Chi4v: 0.015699656776228844\n",
            "22. Kappa1: 0.015466724436620765\n",
            "23. fr_unbrch_alkane: 0.015397565423515076\n",
            "24. BCUT2D_LOGPHI: 0.015219351569106428\n",
            "25. Kappa2: 0.014379828924664136\n",
            "26. AvgIpc: 0.01405815795866298\n",
            "27. Chi3v: 0.013403487635357656\n",
            "28. BCUT2D_CHGHI: 0.013160695681830408\n",
            "29. BCUT2D_CHGLO: 0.01258987835825909\n",
            "30. Ipc: 0.011587877859046867\n",
            "\n",
            "Mean Squared Error (MSE) for PKM2 inhibition prediction: 0.0201\n",
            "Mean Squared Error (MSE) for ERK2 inhibition prediction: 0.0693\n",
            "Top descriptors with SMILES and inhibition columns written to top_descriptors.csv.\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from rdkit import Chem\n",
        "from rdkit.ML.Descriptors import MoleculeDescriptors\n",
        "from rdkit.Chem import Descriptors\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import csv\n",
        "\n",
        "\"\"\"\n",
        "  Perform feature selection using a Random Forest Regressor.\n",
        "\n",
        "  This function fits a Random Forest Regressor to the data, computes the feature importances,\n",
        "  and returns the indices of features sorted by their importance in descending order.\n",
        "\n",
        "  Parameters:\n",
        "  - rf_model (RandomForestRegressor): The Random Forest Regressor model to fit.\n",
        "  - X (pd.DataFrame): The input features.\n",
        "  - y (pd.Series): The target variable.\n",
        "\n",
        "  Returns:\n",
        "  - indices (np.ndarray): Indices of features sorted by their importance in descending order.\n",
        "  - importances (np.ndarray): Importance scores of the features.\n",
        "\"\"\"\n",
        "\n",
        "# Step 1: Read the input CSV file\n",
        "input_csv = \"filtered_molecules222.csv\"\n",
        "df = pd.read_csv(input_csv)\n",
        "\n",
        "# Step 2: Prepare data for modeling\n",
        "descriptor_names = df.columns.drop(['SMILES', 'PKM2_inhibition', 'ERK2_inhibition'])\n",
        "X = df[descriptor_names]\n",
        "y_pkm2 = df['PKM2_inhibition']\n",
        "y_erk2 = df['ERK2_inhibition']\n",
        "\n",
        "# Step 3: Feature selection with Random Forest Regressor\n",
        "rf_pkm2 = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf_erk2 = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "\n",
        "# Function to perform feature selection\n",
        "def perform_feature_selection(rf_model, X, y):\n",
        "    rf_model.fit(X, y)\n",
        "    importances = rf_model.feature_importances_\n",
        "    indices = np.argsort(importances)[::-1]  # Sort feature importances in descending order\n",
        "    return indices, importances\n",
        "\n",
        "# Feature selection for PKM2 inhibition\n",
        "indices_pkm2, importances_pkm2 = perform_feature_selection(rf_pkm2, X, y_pkm2)\n",
        "\n",
        "# Feature selection for ERK2 inhibition\n",
        "indices_erk2, importances_erk2 = perform_feature_selection(rf_erk2, X, y_erk2)\n",
        "\n",
        "# Feature ranking for PKM2 inhibition\n",
        "print(\"Feature ranking for PKM2 inhibition:\")\n",
        "top_features_pkm2 = sorted(zip(descriptor_names, importances_pkm2), key=lambda x: x[1], reverse=True)[:30]\n",
        "for i, (feature, importance) in enumerate(top_features_pkm2, start=1):\n",
        "    print(f\"{i}. {feature}: {importance}\")\n",
        "\n",
        "print()\n",
        "\n",
        "# Feature ranking for ERK2 inhibition\n",
        "print(\"Feature ranking for ERK2 inhibition:\")\n",
        "top_features_erk2 = sorted(zip(descriptor_names, importances_erk2), key=lambda x: x[1], reverse=True)[:30]\n",
        "for i, (feature, importance) in enumerate(top_features_erk2, start=1):\n",
        "    print(f\"{i}. {feature}: {importance}\")\n",
        "\n",
        "# Optional: Evaluate performance with selected features\n",
        "# Split data into train and test sets\n",
        "X_train_pkm2, X_test_pkm2, y_pkm2_train, y_pkm2_test = train_test_split(X.iloc[:, indices_pkm2[:10]], y_pkm2, test_size=0.2, random_state=42)\n",
        "X_train_erk2, X_test_erk2, y_erk2_train, y_erk2_test = train_test_split(X.iloc[:, indices_erk2[:10]], y_erk2, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize new models with selected features\n",
        "rf_pkm2_selected = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "rf_erk2_selected = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "\n",
        "# Fit models on selected features\n",
        "rf_pkm2_selected.fit(X_train_pkm2, y_pkm2_train)\n",
        "rf_erk2_selected.fit(X_train_erk2, y_erk2_train)\n",
        "\n",
        "# Predict on test set\n",
        "y_pkm2_pred = rf_pkm2_selected.predict(X_test_pkm2)\n",
        "y_erk2_pred = rf_erk2_selected.predict(X_test_erk2)\n",
        "\n",
        "# Evaluate performance\n",
        "mse_pkm2 = mean_squared_error(y_pkm2_test, y_pkm2_pred)\n",
        "mse_erk2 = mean_squared_error(y_erk2_test, y_erk2_pred)\n",
        "\n",
        "print(f\"\\nMean Squared Error (MSE) for PKM2 inhibition prediction: {mse_pkm2:.4f}\")\n",
        "print(f\"Mean Squared Error (MSE) for ERK2 inhibition prediction: {mse_erk2:.4f}\")\n",
        "\n",
        "# Extracting top descriptors\n",
        "top_descriptors = set()\n",
        "for feature, _ in top_features_pkm2:\n",
        "    top_descriptors.add(feature)\n",
        "for feature, _ in top_features_erk2:\n",
        "    top_descriptors.add(feature)\n",
        "\n",
        "# Retain only top descriptors in the dataframe\n",
        "top_descriptors_df = df[['SMILES', 'PKM2_inhibition', 'ERK2_inhibition'] + list(top_descriptors)]\n",
        "\n",
        "# Write the descriptors to a CSV file\n",
        "output_file = 'top_descriptors.csv'\n",
        "top_descriptors_df.to_csv(output_file, index=False)\n",
        "\n",
        "print(f\"Top descriptors with SMILES and inhibition columns written to {output_file}.\")\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
